　"열받는 이세계(2020년)" 프로젝트는 엔진을 사용하지 않고 Window의 API를 이용해 별도의 프레임워크를 만들어 진행하였습니다. 
이 문서는 아직 API 및 프레임워크의 사용이 몸에 익지 않았을 때에 보면서 활용하기 위해 만들어진 문서입니다.
또한 이 문서에는 복잡한 디렉토리 구조를 한 눈에 볼 수 있게 메모해 놓았습니다.

　"イライラ異世界(2020年)"プロジェクトはエンジンを使わずWindowのAPIを利用して別のフレームワークを作って進行しました。
この文章はまだAPIとフレームワークの使用が手になじまない頃に読みながら活用するために作られた文章です。
またこの文章では服札なディレクトリを一目で見れるようにメモして置きました。

4, 5, 6番には
4. オブジェクトのInit関数の作成方式
作成の順					: プロトタイプの生成後Initを呼び出す -> クロンの生成後Clone_InitもしくはClone_Load_Initを呼び出す
Backgroundのオブジェクト	: Clone_Initの次にPixel_Collider_Initも呼び出す
Initを呼び出す時			: ピボットのサイズなど
Clone_Initを呼び出す時		: 左上の位置、スピードなど
5. 新たなシーンに渡る時の処理方式
初シーン	: 特定の条件の満足時新たなシーン生成 -> Scene_Manager::Input ~ Scene_Manager::Late_UpdateでScene_Manager::Change_Sceneを使って新たなシーンを生成可否を確認
-> 新たなシーンが生成されたら残りのロジックは実行しない
6. その他熟知するべきこと
Layerにオブジェクトを追加するとそのオブジェクトのInput ~ Renderの処理は自動的に行われるのでユーザー定義シーンの内部で別の処理をしてくれる必要はない。
オブジェクトが下位のオブジェクトを持っている場合そのオブジェクトたちのInput ~ Renderの処理は上位のオブジェクトのInput ~ Renderですること。
衝突体の処理が必要ないシーンを定義する場合Scene::Addをコメント処理して使用しても構わない。
プロトタイプとクロンの設定をよく仕分けよう。
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
게임 하는 법
1. 게임이 시작되면 UI 하나가 출력됩니다.
	첫 번째 : 퀘스트 선택, 현재는 첫 번째의 "골렘을 쓰러뜨려라"밖에 선택 불가능합니다.
	두 번째 : 아이템 선택, 전투에 가져갈 아이템을 선택할 수 있습니다. 총 4개를 선택할 수 있으며 각각 1, 2, 3, 4키를 누른 후 아이템의 아이콘을 클릭하면 장착, 아이콘을
			다시 클릭하면 장착 해제 할 수 있습니다. 현재 장비할 수 있는 아이템은 다음과 같습니다.
			장미칼		: 무기
			바게트		: 무기	(장미칼 사용 후 캐릭터가 돌아오기 전에 사용하면 콤보 발동)
			큰 가방		: 방패
			오렌지주스	: 소모품
	오른쪽 아래의 버튼을 클릭해 전투를 시작할 수 있습니다.
2. 전투 시 1, 2, 3, 4키를 누르면 장착한 아이템을 사용할 수 있습니다. W키로 점프 회피, S키로 하단 회피를 할 수 있습니다. 몬스터의 체력을 0으로 만들면 승리합니다.

ゲームのやり方
1. ゲームを実行すると1つのUIが現れます。
	1つ目	: クェスとの選択、現在は1つ目の"ゴレムを倒そう(골렘을 쓰러뜨려라)"しか選べません。
	2つ目	: アイテムの選択、戦闘に持って行くアイテムを選択できます。計４個を選択できますしそれぞれ１，２，３，4キーを押した後アイテムのアイコンをクリックすると装着、
			アイコンを再びクリックすると装着解除することができます。現在装着できるアイテムは
			ローズナイフ		: 武器
			バゲット			: 武器
			大きいカバン		: 盾
			オレンジジュース	: 消耗品
2. 戦闘時1,2,3,4キーを押すと装着したアイテムを使用することができます。Wキーでジャンプ回避、Sキーで下段回避ができます。モンスターの体力を0にすれば勝利します。
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
프레임워크 사용 매뉴얼

0. API 프로그래밍 숙지할 것들
초기 프로젝트 생성
 빈 프로젝트 생성
 생성된 프로젝트 탐색기에서 제거
 만든 프로젝트 폴더에 Bin(안에는 Debug32 ~ Release64 있어야 함), Include 폴더 생성
 만들어져 있는 프로젝트 파일 Include로 이동
 탐색기에 기존 프로젝트 추가
 프로젝트 설정에서 각 구성과 플랫폼에 맞게 "출력 디렉토리" "대상 이름" 수정
 Core::MyRegisterClass에서 클래스 이름 설정하기
 Core::Create에서 윈도우 크기 맞추기
 리소스 파일 우클릭 -> 추가 -> 리소스 -> Icon 새로 만들기
 만들어진 아이콘 매크로 상수 Core::MyRegisterClass 안에 대입하기
 복사할 코드들 복사해 넣기
리소스 파일 만들기
 리소스 파일 우클릭 -> 추가 -> 리소스
빈칸 창 띄우기
 rc파일로 들어가기 -> 우클릭 -> 리소스 추가 -> Dialog 새로 만들기 -> 도구 상자에서 원하는 것 추가(빈칸 창의 경우 Edit Control)
 -> 저장 -> DialogBox랑 거기에 인자로 들어가는 함수 통해 작업
FMOD 사운드 라이브러리 링크(환경변수 이용)
 필요한 FMOD API 긁어오기(dll파일은 exe파일과 같은 폴더에 두자) -> 추가 라이브러리 디렉토리에 lib파일 있는 경로 추가
 -> 추가 종속성에 lib파일 이름 추가 -> fmod.h 인클루드 하고 fmod_vc 라이브러리 링크하기

1. 헤더 파일
Game.h : 여러 헤더 파일들의 집합체.
resource.h : 아이콘, 다이얼로그 등등을 관리하는 헤더 파일.
Macro.h : 사용자 정의 시스템 매크로 함수 및 변수를 관리.
Types.h : 사용자 정의 자료형들을 관리.

2. 시스템 싱글턴 클래스
Core : Main 함수 상에서 돌아가는 클래스이다. 다른 여러 싱글턴 클래스들이 이 클래스 위에서 돌아간다.
Timer : 델타 타임, FPS 등 시간과 관련된 것들을 계산한다.
Input_Manager : 사용자의 입력을 관리한다. 마우스 입력의 경우 Mouse 클래스를 통해 관리한다.
Path_Manager : 리소스의 경로를 관리한다.
Resource_Manager : 이미지 리소스를 관리한다.
FMOD_Manager : FMOD 라이브러리를 사용해 사운드 리소스를 관리한다.
Camera : 게임 상 카메라와 카메라의 타겟을 관리한다.
Collision_Manager : Scene_Manager의 Add에서 더해진 충돌체들로 충돌 체크를 한다.
Scene_Manager : 씬을 관리한다. 씬은 레이어 리스트를 가지고 있고 레이어는 오브젝트 리스트를 가지고 있다.

3. 헤더 파일 상단 매크로 정의
작성 방식 : 각 클래스마다 연관된 매크로를 가지고 있다.
작성 순서 : 상수 값 -> 키 값 -> 밸류 값 및 파일명 -> 매크로 함수

4. 오브젝트의 Init 함수 작성 방식
작성 순서			: 프로토타입 생성 후 Init 호출 -> 클론 생성 후 Clone_Init 혹은 Clone_Load_Init 호출
Background 오브젝트 : Clone_Init 다음에 Pixel_Collider_Init도 호출한다.
Init 호출 시		: 피봇 사이즈 등등
Clone_Init 호출 시	: 좌상단위치 스피드 등등

5. 새로운 씬 넘어갈 때 처리 방식
첫 씬 : Scene_Manager::Init에서 생성
이후 씬 : 특정 조건 만족 시 새로운 씬 생성 -> Scene_Manager::Input ~ Scene_Manager::Late_Update에서 Scene_Manager::Change_Scene을 통해 새로운 씬 생성
 여부 확인 -> 새로운 씬이 생성되었다면 남은 로직은 실행하지 않는다

6. 기타 숙지할 사항들
 Layer에 오브젝트를 추가하면 그 오브젝트의 Input ~ Render 처리는 자동적으로 이루어지니 사용자 정의 씬의 내부에서 따로 처리를 해 줄 필요는 없다.
 오브젝트가 하위 오브젝트를 가지고 있을 경우 그 오브젝트들의 Input ~ Render 처리는 상위 오브젝트의 Input ~ Render에서 하도록 한다.
 충돌체 처리가 필요없는 씬을 정의할 경우 Scene::Add를 주석 처리해서 사용해도 무방하다.
 프로토타입과 클론의 설정을 잘 구분하자.

## 미완성 클래스
Select_Panal

## 유용한 비주얼 스튜디오 단축키
Tap + Tap = 자동 중괄호
Ctrl + R + R : 변수명 일괄 수정
Ctrl + Shift + U : 대문자로 수정
빨간색일 때 엔터 : enum 자료형 스위치문 자동완성

///// 누락된 부분을 발견할 시 제작자에게 알려주시면 감사하겠습니다 ^^